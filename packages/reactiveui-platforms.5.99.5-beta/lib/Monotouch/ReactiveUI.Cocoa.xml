<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactiveUI.Cocoa</name>
    </assembly>
    <members>
        <member name="T:ReactiveUI.Cocoa.CocoaDefaultPropertyBinding">
            <summary>
            Provides default property bindings for a number of common Cocoa controls.
            </summary>
        </member>
        <member name="T:ReactiveUI.Cocoa.KVOObservableForProperty">
            <summary>
            This class provides notifications for Cocoa Framework objects based on
            Key-Value Observing. Unfortunately, this class is a bit Trickyâ„¢, because
            of the caveat mentioned below - there is no way up-front to be able to
            tell whether a given property on an object is Key-Value Observable, we
            only have to hope for the best :-/
            </summary>
        </member>
        <member name="T:ReactiveUI.Cocoa.Cocoa.LinkerOverrides">
            <summary>
            This class exists to force the MT linker to include properties called by RxUI via reflection
            </summary>
        </member>
        <member name="T:ReactiveUI.Cocoa.NSRunloopScheduler">
            <summary>
            Provides a scheduler which will use the Cocoa main loop to schedule
            work on. This is the Cocoa equivalent of DispatcherScheduler.
            </summary>
        </member>
        <member name="T:ReactiveUI.Cocoa.RoutedViewHost">
            <summary>
            RoutedViewHost is a helper class that will connect a RoutingState
            to an arbitrary NSView and attempt to load the View for the latest
            ViewModel as a child view of the target. Usually the target view will
            be the NSWindow.
            This is a bit different than the XAML's RoutedViewHost in the sense
            that this isn't a Control itself, it only manipulates other Views.
            </summary>
        </member>
        <member name="T:ReactiveUI.Cocoa.TargetActionCommandBinder">
            <summary>
            TargetActionCommandBinder is an implementation of command binding that
            understands Cocoa's Target / Action Framework. Many controls in Cocoa
            that are effectively command sources (i.e. Buttons, Menus, etc),
            participate in this framework.
            </summary>
        </member>
        <member name="T:ReactiveUI.Cocoa.ViewModelViewHost">
            <summary>
            ViewModelViewHost is a helper class that will connect a ViewModel
            to an arbitrary NSView and attempt to load the View for the current
            ViewModel as a child view of the target.
            This is a bit different than the XAML's ViewModelViewHost in the sense
            that this isn't a Control itself, it only manipulates other Views.
            </summary>
        </member>
        <member name="F:ReactiveUI.Cocoa.FlexibleCommandBinder.config">
            <summary>
            Configuration map
            </summary>
        </member>
        <member name="M:ReactiveUI.Cocoa.FlexibleCommandBinder.Register(System.Type,System.Int32,System.Func{System.Windows.Input.ICommand,System.Object,System.IObservable{System.Object},System.IDisposable})">
            <summary>
            Registers an observable factory for the specified type and property.
            </summary>
            <param name="type">Type.</param>
            <param name="property">Property.</param>
            <param name="createObservable">Create observable.</param>
        </member>
        <member name="M:ReactiveUI.Cocoa.FlexibleCommandBinder.ForEvent(System.Windows.Input.ICommand,System.Object,System.IObservable{System.Object},System.String,System.String)">
            <summary>
            Creates a commands binding from event and a property
            </summary>
            <returns>The binding from event.</returns>
            <param name="command">Command.</param>
            <param name="target">Target.</param>
            <param name="commandParameter">Command parameter.</param>
            <param name="eventName">Event name.</param>
            <param name="enablePropertyName">Enable property name.</param>
        </member>
        <member name="M:ReactiveUI.Cocoa.FlexibleCommandBinder.ForTargetAction(System.Windows.Input.ICommand,System.Object,System.IObservable{System.Object},System.String)">
            <summary>
            Creates a commands binding from event and a property
            </summary>
        </member>
        <member name="T:ReactiveUI.ComponentModelTypeConverter">
            <summary>
            This binding type converter uses the built-in WPF component model
            conversions to get a whole bunch of conversions for free. Unfortunately,
            these are pretty gutted on some other platforms like Silverlight.
            </summary>
        </member>
        <member name="T:ReactiveUI.Cocoa.Registrations">
            <summary>
            Ignore me. This class is a secret handshake between RxUI and RxUI.Xaml
            in order to register certain classes on startup that would be difficult
            to register otherwise.
            </summary>
        </member>
        <member name="T:ReactiveUI.Cocoa.PlatformOperations">
            <summary>
            Returns the current orientation of the device on iOS.
            </summary>
        </member>
        <member name="F:ReactiveUI.Cocoa.UIKitObservableForPropertyBase.config">
            <summary>
            Configuration map
            </summary>
        </member>
        <member name="M:ReactiveUI.Cocoa.UIKitObservableForPropertyBase.Register(System.Type,System.String,System.Int32,System.Func{MonoTouch.Foundation.NSObject,System.String,System.IObservable{ReactiveUI.IObservedChange{System.Object,System.Object}}})">
            <summary>
            Registers an observable factory for the specified type and property.
            </summary>
            <param name="type">Type.</param>
            <param name="property">Property.</param>
            <param name="createObservable">Create observable.</param>
        </member>
        <member name="M:ReactiveUI.Cocoa.UIKitObservableForPropertyBase.ObservableFromUIControlEvent(MonoTouch.Foundation.NSObject,System.String,MonoTouch.UIKit.UIControlEvent)">
            <summary>
            Creates an Observable for a UIControl Event
            </summary>
            <returns>An observable</returns>
            <param name="sender">The sender</param>
            <param name="propertyName">The property name </param>
            <param name="evt">The control event to listen for</param>
        </member>
        <member name="M:ReactiveUI.Cocoa.UIKitObservableForPropertyBase.ObservableFromNotification(MonoTouch.Foundation.NSObject,System.String,MonoTouch.Foundation.NSString)">
            <summary>
            Creates an Observable for a NSNotificationCenter notification
            </summary>
            <returns>The from notification.</returns>
            <param name="sender">Sender.</param>
            <param name="propertyName">Property name.</param>
            <param name="notification">Notification.</param>
        </member>
        <member name="M:ReactiveUI.Cocoa.UIKitObservableForPropertyBase.ObservableFromEvent(MonoTouch.Foundation.NSObject,System.String,System.String)">
            <summary>
            Creates an Observable for a NSNotificationCenter notification
            </summary>
            <returns>The from notification.</returns>
            <param name="sender">Sender.</param>
            <param name="propertyName">Property name.</param>
            <param name="notification">Notification.</param>
        </member>
        <member name="T:ReactiveUI.Cocoa.ReactiveView">
            <summary>
            This is an View that is both an NSView and has ReactiveObject powers
            (i.e. you can call RaiseAndSetIfChanged)
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveView.Changing">
            <summary>
            Represents an Observable that fires *before* a property is about to
            be changed.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveView.Changed">
            <summary>
            Represents an Observable that fires *after* a property has changed.
            </summary>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactiveView.SuppressChangeNotifications">
            <summary>
            When this method is called, an object will not fire change
            notifications (neither traditional nor Observable notifications)
            until the return value is disposed.
            </summary>
            <returns>An object that, when disposed, reenables change
            notifications.</returns>
        </member>
        <member name="T:ReactiveUI.Cocoa.ReactiveViewController">
            <summary>
            This is an View that is both an NSViewController and has ReactiveObject powers
            (i.e. you can call RaiseAndSetIfChanged)
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveViewController.Changing">
            <summary>
            Represents an Observable that fires *before* a property is about to
            be changed.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveViewController.Changed">
            <summary>
            Represents an Observable that fires *after* a property has changed.
            </summary>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactiveViewController.SuppressChangeNotifications">
            <summary>
            When this method is called, an object will not fire change
            notifications (neither traditional nor Observable notifications)
            until the return value is disposed.
            </summary>
            <returns>An object that, when disposed, reenables change
            notifications.</returns>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveTableViewCell.Changing">
            <summary>
            Represents an Observable that fires *before* a property is about to
            be changed.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveTableViewCell.Changed">
            <summary>
            Represents an Observable that fires *after* a property has changed.
            </summary>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactiveTableViewCell.SuppressChangeNotifications">
            <summary>
            When this method is called, an object will not fire change
            notifications (neither traditional nor Observable notifications)
            until the return value is disposed.
            </summary>
            <returns>An object that, when disposed, reenables change
            notifications.</returns>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveTableViewController.Changing">
            <summary>
            Represents an Observable that fires *before* a property is about to
            be changed.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveTableViewController.Changed">
            <summary>
            Represents an Observable that fires *after* a property has changed.
            </summary>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactiveTableViewController.SuppressChangeNotifications">
            <summary>
            When this method is called, an object will not fire change
            notifications (neither traditional nor Observable notifications)
            until the return value is disposed.
            </summary>
            <returns>An object that, when disposed, reenables change
            notifications.</returns>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveImageView.Changing">
            <summary>
            Represents an Observable that fires *before* a property is about to
            be changed.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveImageView.Changed">
            <summary>
            Represents an Observable that fires *after* a property has changed.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.TableSectionInformation`1.Header">
            <summary>
            Gets or sets the header of this section.
            </summary>
            <value>The header, or null if a header shouldn't be used.</value>
        </member>
        <member name="P:ReactiveUI.Cocoa.TableSectionInformation`1.Footer">
            <summary>
            Gets or sets the footer of this section.
            </summary>
            <value>The footer, or null if a footer shouldn't be used.</value>
        </member>
        <member name="T:ReactiveUI.Cocoa.TableSectionHeader">
            <summary>
            A header or footer of a table section.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.TableSectionHeader.View">
            <summary>
            Gets the function that creates the <see cref="T:MonoTouch.UIKit.UIView" />
            used as header for this section. Overrides Title
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.TableSectionHeader.Height">
            <summary>
            Gets the height of the header.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.TableSectionHeader.Title">
            <summary>
            Gets the title for the section header, only used if View is null.
            </summary>
        </member>
        <member name="M:ReactiveUI.Cocoa.TableSectionHeader.#ctor(System.Func{MonoTouch.UIKit.UIView},System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ReactiveUI.Cocoa.TableSectionHeader" />
            struct.
            </summary>
            <param name="view">Function that creates header's <see cref="T:MonoTouch.UIKit.UIView" />.</param>
            <param name="height">Height of the header.</param>
        </member>
        <member name="M:ReactiveUI.Cocoa.TableSectionHeader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ReactiveUI.Cocoa.TableSectionHeader" /> class.
            </summary>
            <param name="title">Title to use.</param>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveTableViewSource`1.Data">
            <summary>
            Gets or sets the data that should be displayed by this
            <see cref="!:ReactiveTableViewSource" />.  You should
            probably bind your view model to this property.
            If the list implements <see cref="!:IReactiveNotifyCollectionChanged" />,
            then the source will react to changes to the contents of the list as well.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveTableViewSource`1.ElementSelected">
            <summary>
            Gets an IObservable that is a hook to <see cref="M:ReactiveUI.Cocoa.ReactiveTableViewSource{`0}.RowSelected(MonoTouch.UIKit.UITableView,MonoTouch.Foundation.NSIndexPath)" /> calls.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveTableViewSource`1.Changing">
            <summary>
            Represents an Observable that fires *before* a property is about to
            be changed.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveTableViewSource`1.Changed">
            <summary>
            Represents an Observable that fires *after* a property has changed.
            </summary>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactiveTableViewSource`1.SuppressChangeNotifications">
            <summary>
            When this method is called, an object will not fire change
            notifications (neither traditional nor Observable notifications)
            until the return value is disposed.
            </summary>
            <returns>An object that, when disposed, reenables change
            notifications.</returns>
        </member>
        <member name="T:ReactiveUI.Cocoa.ReactiveTableViewSourceExtensions">
            <summary>
            Extension methods for <see cref="!:ReactiveTableViewSource" />.
            </summary>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactiveTableViewSourceExtensions.BindTo``2(System.IObservable{System.Collections.Generic.IReadOnlyList{ReactiveUI.Cocoa.TableSectionInformation{``0,``1}}},MonoTouch.UIKit.UITableView,System.Func{ReactiveUI.Cocoa.ReactiveTableViewSource{``0},System.IDisposable})">
            <summary>
                <para>Extension method that binds an observable of a list of table
            sections as the source of a <see cref="T:MonoTouch.UIKit.UITableView" />.</para>
                <para>If your <see cref="!:IReadOnlyList" /> is also an instance of
            <see cref="!:IReactiveNotifyCollectionChanged" />, then this method
            will silently update the bindings whenever it changes as well.
            Otherwise, it will just log a message.</para>
            </summary>
            <returns>The <see cref="T:System.IDisposable" /> used to dispose this binding.</returns>
            <param name="sectionsObservable">Sections observable.</param>
            <param name="tableView">Table view.</param>
            <param name="initSource">Optionally initializes some property of
            the <see cref="!:ReactiveTableViewSource" />.</param>
            <typeparam name="TCell">Type of the <see cref="T:MonoTouch.UIKit.UITableViewCell" />.</typeparam>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactiveTableViewSourceExtensions.BindTo``2(System.IObservable{ReactiveUI.IReactiveNotifyCollectionChanged{``0}},MonoTouch.UIKit.UITableView,MonoTouch.Foundation.NSString,System.Single,System.Action{``1},System.Func{ReactiveUI.Cocoa.ReactiveTableViewSource{``0},System.IDisposable})">
            <summary>
            Extension method that binds an observable of a collection
            as the source of a <see cref="T:MonoTouch.UIKit.UITableView" />.
            </summary>
            <returns>The <see cref="T:System.IDisposable" /> used to dispose this binding.</returns>
            <param name="sourceObservable">Source collection observable.</param>
            <param name="tableView">Table view.</param>
            <param name="cellKey">Cell key.</param>
            <param name="sizeHint">Size hint.</param>
            <param name="initializeCellAction">Initialize cell action.</param>
            <param name="initSource">Optionally initializes some property of
            the <see cref="!:ReactiveTableViewSource" />.</param>
            <typeparam name="TCell">Type of the <see cref="T:MonoTouch.UIKit.UITableViewCell" />.</typeparam>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactiveTableViewSourceExtensions.BindTo``2(System.IObservable{ReactiveUI.IReactiveNotifyCollectionChanged{``0}},MonoTouch.UIKit.UITableView,System.Single,System.Action{``1},System.Func{ReactiveUI.Cocoa.ReactiveTableViewSource{``0},System.IDisposable})">
            <summary>
            Extension method that binds an observable of a collection
            as the source of a <see cref="T:MonoTouch.UIKit.UITableView" />.  Also registers
            the given class with an unspecified cellKey (you should probably
            not specify any other cellKeys).
            </summary>
            <returns>The <see cref="T:System.IDisposable" /> used to dispose this binding.</returns>
            <param name="sourceObservable">Source collection observable.</param>
            <param name="tableView">Table view.</param>
            <param name="sizeHint">Size hint.</param>
            <param name="initializeCellAction">Initialize cell action.</param>
            <param name="initSource">Optionally initializes some property of
            the <see cref="!:ReactiveTableViewSource" />.</param>
            <typeparam name="TCell">Type of the <see cref="T:MonoTouch.UIKit.UITableViewCell" />.</typeparam>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveCollectionViewCell.Changing">
            <summary>
            Represents an Observable that fires *before* a property is about to
            be changed.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveCollectionViewCell.Changed">
            <summary>
            Represents an Observable that fires *after* a property has changed.
            </summary>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactiveCollectionViewCell.SuppressChangeNotifications">
            <summary>
            When this method is called, an object will not fire change
            notifications (neither traditional nor Observable notifications)
            until the return value is disposed.
            </summary>
            <returns>An object that, when disposed, reenables change
            notifications.</returns>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveCollectionViewSource`1.Data">
            <summary>
            Gets or sets the data that should be displayed by this
            <see cref="!:ReactiveCollectionViewSource" />.  You should
            probably bind your view model to this property.
            If the list implements <see cref="!:IReactiveNotifyCollectionChanged" />,
            then the source will react to changes to the contents of the list as well.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveCollectionViewSource`1.ElementSelected">
            <summary>
            Gets an IObservable that is a hook to <see cref="M:ReactiveUI.Cocoa.ReactiveCollectionViewSource{`0}.ItemSelected(MonoTouch.UIKit.UICollectionView,MonoTouch.Foundation.NSIndexPath)" /> calls.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveCollectionViewSource`1.Changing">
            <summary>
            Represents an Observable that fires *before* a property is about to
            be changed.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveCollectionViewSource`1.Changed">
            <summary>
            Represents an Observable that fires *after* a property has changed.
            </summary>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactiveCollectionViewSource`1.SuppressChangeNotifications">
            <summary>
            When this method is called, an object will not fire change
            notifications (neither traditional nor Observable notifications)
            until the return value is disposed.
            </summary>
            <returns>An object that, when disposed, reenables change
            notifications.</returns>
        </member>
        <member name="T:ReactiveUI.Cocoa.ReactiveCollectionViewSourceExtensions">
            <summary>
            Extension methods for <see cref="!:ReactiveCollectionViewSource" />.
            </summary>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactiveCollectionViewSourceExtensions.BindTo``2(System.IObservable{System.Collections.Generic.IReadOnlyList{ReactiveUI.Cocoa.CollectionViewSectionInformation{``0,``1}}},MonoTouch.UIKit.UICollectionView,System.Func{ReactiveUI.Cocoa.ReactiveCollectionViewSource{``0},System.IDisposable})">
            <summary>
                <para>Extension method that binds an observable of a list of collection
            sections as the source of a <see cref="T:MonoTouch.UIKit.UICollectionView" />.</para>
                <para>If your <see cref="!:IReadOnlyList" /> is also an instance of
            <see cref="!:IReactiveNotifyCollectionChanged" />, then this method
            will silently update the bindings whenever it changes as well.
            Otherwise, it will just log a message.</para>
            </summary>
            <returns>The <see cref="T:System.IDisposable" /> used to dispose this binding.</returns>
            <param name="sectionsObservable">Sections observable.</param>
            <param name="collectionView">Collection view.</param>
            <param name="initSource">Optionally initializes some property of
            the <see cref="!:ReactiveCollectionViewSource" />.</param>
            <typeparam name="TCell">Type of the <see cref="T:MonoTouch.UIKit.UICollectionViewCell" />.</typeparam>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactiveCollectionViewSourceExtensions.BindTo``2(System.IObservable{ReactiveUI.IReactiveNotifyCollectionChanged{``0}},MonoTouch.UIKit.UICollectionView,MonoTouch.Foundation.NSString,System.Action{``1},System.Func{ReactiveUI.Cocoa.ReactiveCollectionViewSource{``0},System.IDisposable})">
            <summary>
            Extension method that binds an observable of a collection
            as the source of a <see cref="T:MonoTouch.UIKit.UICollectionView" />.
            </summary>
            <returns>The <see cref="T:System.IDisposable" /> used to dispose this binding.</returns>
            <param name="sourceObservable">Source collection observable.</param>
            <param name="collectionView">Collection view.</param>
            <param name="cellKey">Cell key.</param>
            <param name="initializeCellAction">Initialize cell action.</param>
            <param name="initSource">Optionally initializes some property of
            the <see cref="!:ReactiveCollectionViewSource" />.</param>
            <typeparam name="TCell">Type of the <see cref="T:MonoTouch.UIKit.UICollectionViewCell" />.</typeparam>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactiveCollectionViewSourceExtensions.BindTo``2(System.IObservable{ReactiveUI.IReactiveNotifyCollectionChanged{``0}},MonoTouch.UIKit.UICollectionView,System.Action{``1},System.Func{ReactiveUI.Cocoa.ReactiveCollectionViewSource{``0},System.IDisposable})">
            <summary>
            Extension method that binds an observable of a collection
            as the source of a <see cref="T:MonoTouch.UIKit.UICollectionView" />.  Also registers
            the given class with an unspecified cellKey (you should probably
            not specify any other cellKeys).
            </summary>
            <returns>The <see cref="T:System.IDisposable" /> used to dispose this binding.</returns>
            <param name="sourceObservable">Source collection observable.</param>
            <param name="collectionView">Collection view.</param>
            <param name="initializeCellAction">Initialize cell action.</param>
            <param name="initSource">Optionally initializes some property of
            the <see cref="!:ReactiveCollectionViewSource" />.</param>
            <typeparam name="TCell">Type of the <see cref="T:MonoTouch.UIKit.UICollectionViewCell" />.</typeparam>
        </member>
        <member name="T:ReactiveUI.Cocoa.IUICollViewAdapter`2">
            <summary>
            Interface used to extract a common API between <see cref="T:MonoTouch.UIKit.UITableView" />
            and <see cref="T:MonoTouch.UIKit.UICollectionView" />.
            </summary>
        </member>
        <member name="T:ReactiveUI.Cocoa.CommonReactiveSource`4">
            <summary>
            Internal class containing the common code between <see cref="!:ReactiveTableViewSource" />
            and <see cref="!:ReactiveCollectionViewSource" />.
            </summary>
        </member>
        <member name="F:ReactiveUI.Cocoa.CommonReactiveSource`4.mainDisp">
            <summary>
            Main disposable which is disposed when this object is disposed.
            </summary>
        </member>
        <member name="F:ReactiveUI.Cocoa.CommonReactiveSource`4.setupDisp">
            <summary>
            Disposable used by the setup procedure.
            </summary>
        </member>
        <member name="F:ReactiveUI.Cocoa.CommonReactiveSource`4.adapter">
            <summary>
            The adapter of the UIKit view.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.CommonReactiveSource`4.SectionInfo">
            <summary>
            Gets or sets the list of sections that this <see cref="!:CommonReactiveSource" />
            should display.  Setting a new value always causes the table view to be reloaded.
            If the list implements <see cref="!:IReactiveNotifyCollectionChanged" />,
            then the source will react to changes to the contents of the list as well.
            </summary>
        </member>
        <member name="F:ReactiveUI.Cocoa.CommonReactiveSource`4.sectionInfo">
            <summary>
            Field backing <see cref="P:ReactiveUI.Cocoa.CommonReactiveSource{`0,`1,`2,`3}.SectionInfo" />.  Initialized to an empty
            array in order to avoid null reference exceptions if the source is
            used before a real section info has been set.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.CommonReactiveSource`4.DidPerformUpdates">
            <summary>
            IObservable that pushes a new value after the corresponding IUICollViewAdapter
            finishes processing changes from the underlying collection. Due to the buffered
            nature of the processing, the value is an IEnumerable of the changes.
            </summary>
            <value>An IEnumerable containing all the changes processed. Note that in
            some cases those can be different than the change events published by the
            underlying collection (for example the return value will contain a single
            Reset event arg even though the collection did not send a Reset, but the adapter
            performed a Reload nevertheless)</value>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveCollectionViewController.Changing">
            <summary>
            Represents an Observable that fires *before* a property is about to
            be changed.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveCollectionViewController.Changed">
            <summary>
            Represents an Observable that fires *after* a property has changed.
            </summary>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactiveCollectionViewController.SuppressChangeNotifications">
            <summary>
            When this method is called, an object will not fire change
            notifications (neither traditional nor Observable notifications)
            until the return value is disposed.
            </summary>
            <returns>An object that, when disposed, reenables change
            notifications.</returns>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveControl.Changing">
            <summary>
            Represents an Observable that fires *before* a property is about to
            be changed.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveControl.Changed">
            <summary>
            Represents an Observable that fires *after* a property has changed.
            </summary>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactiveControl.SuppressChangeNotifications">
            <summary>
            When this method is called, an object will not fire change
            notifications (neither traditional nor Observable notifications)
            until the return value is disposed.
            </summary>
            <returns>An object that, when disposed, reenables change
            notifications.</returns>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactivePageViewController.Changing">
            <summary>
            Represents an Observable that fires *before* a property is about to
            be changed.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactivePageViewController.Changed">
            <summary>
            Represents an Observable that fires *after* a property has changed.
            </summary>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactivePageViewController.SuppressChangeNotifications">
            <summary>
            When this method is called, an object will not fire change
            notifications (neither traditional nor Observable notifications)
            until the return value is disposed.
            </summary>
            <returns>An object that, when disposed, reenables change
            notifications.</returns>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveCollectionView.Changing">
            <summary>
            Represents an Observable that fires *before* a property is about to
            be changed.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveCollectionView.Changed">
            <summary>
            Represents an Observable that fires *after* a property has changed.
            </summary>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactiveCollectionView.SuppressChangeNotifications">
            <summary>
            When this method is called, an object will not fire change
            notifications (neither traditional nor Observable notifications)
            until the return value is disposed.
            </summary>
            <returns>An object that, when disposed, reenables change
            notifications.</returns>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveCollectionReusableView.Changing">
            <summary>
            Represents an Observable that fires *before* a property is about to
            be changed.
            </summary>
        </member>
        <member name="P:ReactiveUI.Cocoa.ReactiveCollectionReusableView.Changed">
            <summary>
            Represents an Observable that fires *after* a property has changed.
            </summary>
        </member>
        <member name="M:ReactiveUI.Cocoa.ReactiveCollectionReusableView.SuppressChangeNotifications">
            <summary>
            When this method is called, an object will not fire change
            notifications (neither traditional nor Observable notifications)
            until the return value is disposed.
            </summary>
            <returns>An object that, when disposed, reenables change
            notifications.</returns>
        </member>
    </members>
</doc>
